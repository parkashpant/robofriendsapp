{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","cardArray","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_CardList","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducers","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0acbfbc.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n\treturn (\n\t\t<div className= 'tc f5 bg-light-green dib pa1 ma2 grow shadow-3 br2'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\t// if(true) {\n\t// \tthrow Error\n\t// }\n\tconst cardArray = robots.map((user, i) => {\n\t\treturn (\n\t\t\t<Card \n\t\t\tkey= {i} \n\t\t\tid= {robots[i].id} \n\t\t\tname= {robots[i].name} \n\t\t\temail= {robots[i].email} \n\t\t\t/>\n\t\t);\n\t})\t\n\n\treturn (\n\t\t<div>\n\t\t{cardArray}\n\t\t</div>\n\t\t);\n}\n\nexport default CardList; \n","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\treturn (\n\t\t<div>\n\t\t\t<input \n\t\t\tclassName='ma3 pa3 ba bg-lightest-blue' \n\t\t\ttype='search' \n\t\t\tplaceholder='Find robots' \n\t\t\tonChange= {searchChange}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t);\n}\n\nexport default Scroll;","import React, { Component } from 'react'\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions';\nimport './App.css';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n             \n\trender() {\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter((robot) => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\n\t\treturn isPending ?\n\t\t\t<h2>Loading...</h2> :\n\t\t\t(\n\t\t\t\t<div className= 'tc'>\n\t\t\t\t\t<h1 className= ' f1 tracked light-green dim'>Robofriends</h1>\n\t\t\t\t\t<SearchBox searchChange= { onSearchChange }/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<CardList robots= { filteredRobots } />\n\t\t\t\t\t</Scroll>\t\n\t\t\t\t</div> \n\t\t\t);\n\t\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => {\n\treturn {\n\t\ttype: CHANGE_SEARCH_FIELD,\n\t\tpayload: text\n\t}\t\n}\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import { \n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js';\n\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {\n\t\t\t\tsearchField: action.payload\n\t\t\t});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, {isPending: true});\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false});\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false});\t\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\nimport { searchRobots, requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t\t\t\t<Provider store={store}>\n\t\t\t    \t<App />\n\t\t\t  \t</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}